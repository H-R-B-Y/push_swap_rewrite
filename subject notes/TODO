

1. STR TO INT IS FAILING FOR ANY NEGATIVE THAT HAS A ZERO IN IT

4. loop over operations to reduce down too double operations (rr = ra + rb)
5. look into validity of greedy pushing
6. look into maybe swapping the top elements if one is smaller
7. optimise quickselect to make use of the linked list instead of transforming it into an array
8. grab my graph creator to measure up against previous attempt

worst case scenario would be if the list is reversed?
how do we approach that

notes that used to be in main:

/*
Sort will happen in two intertwined phases

	divide the stack
	focus on stack b first
	keep dividing until you reach a division that has 2 / 3 items
	sort both divisions
	merge the divisions
	then look at the next divison

so stack goes like:
7
3
6
1
18
5
9
11
14

median is 7 so:
a		b
18		7
9		3
11		6
14		1
		5

divide again
A		B
3		7
1		6
5
18
9
11
14

sort two divions:
A		B
5		7
3		6
1
18
9
11
14

merge back:
A		B
18		7
9		6
11		5
14		3
		1

divide again:
A		B
9		18
11		14
		7
		6
		5
		3
		1

sort:
A		B
9		14
11		18
		7
		6
		5
		3
		1

merge:
A		B
9		7
11		6
14		5
18		3
		1

merge back:
1
3
5
6
7
9
11
14
18

Note that all substacks of b sort in reverse order of stack a?
this might not be needed I will have to figure that out

I want this to be a recursive function (division)

	if (size < 4) {
		sort_base_case(size);  // Sort small chunks directly
		return;
	}
	int half = size / 2;
	// Move half of `a` to `b`
	move_to_b(half);
	// Recursively sort the first half (now in `b`)
	sort_stack(half);
	// Recursively sort the second half (remaining in `a`)
	sort_stack(size - half);
	// Merge sorted halves back into `a`
	merge_sorted_chunks(size, half);
*/


// int main(int argc, char **argv, char **env)
// {
// 	t_cdll	*cdll;

// 	if (argc < 2)
// 		return (0);
// 	// validate and parse inputs
// 	// if not validate or parse failed
// 	//	return (1);
// 	// any other data prep
// 	// sort(data);
// 	return (0);
// }

/*
You have to write a program named push_swap that takes as an argument the stack
a formatted as a list of integers. The first argument should be at the top of the
stack (be careful about the order).
*/

// #define INT_MAX_STR "2147483647"
// #define INT_MIN_STR "-2147483648"

